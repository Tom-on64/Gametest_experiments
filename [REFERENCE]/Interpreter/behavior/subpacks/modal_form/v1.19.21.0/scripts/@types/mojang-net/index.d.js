export default"// Type definitions for Minecraft Bedrock Edition script APIs (experimental) 0.1\n// Project: https://docs.microsoft.com/minecraft/creator/\n// Definitions by: Jake Shirley <https://github.com/JakeShirley>\n//                 Mike Ammerlaan <https://github.com/mammerla>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\n/* *****************************************************************************\n   Copyright (c) Microsoft Corporation.\n   ***************************************************************************** */\n/**\n * The `mojang-net` module contains types for executing\n * HTTP-based requests.\n *\n * Manifest Details\n * ```json\n * {\n *   // mojang-net\n *   \"uuid\": \"777b1798-13a6-401c-9cba-0cf17e31a81b\",\n *   \"version\": [ 0, 1, 0 ]\n * }\n * ```\n *\n */\nimport * as mojangminecraftserveradmin from 'mojang-minecraft-server-admin';\nexport enum HttpRequestMethod {\n    /**\n     * Represents the method for an HTTP PUT request. GET requests\n     * are commonly used to retrieve information about a resource\n     * at the specified URI.\n     */\n    POST = 0,\n    /**\n     * Represents the method for an HTTP PUT request. PUT requests\n     * are commonly used to update a single resource that already\n     * exists in a resource collection.\n     */\n    PUT = 1,\n    /**\n     * Represents the method for an HTTP PUT request. POST requests\n     * are commonly used to create a new resource that is a\n     * subordinate of the specified URI.\n     */\n    GET = 2,\n    /**\n     * Represents the method for an HTTP HEAD request. HEAD\n     * requests are similar to a GET request, but are commonly used\n     * to retrieve just the HTTP response headers from the\n     * specified URI, and not the body contents.\n     */\n    DELETE = 3,\n    /**\n     * Represents the method for an HTTP PUT request. GET requests\n     * are commonly used to retrieve information about a resource\n     * at the specified URI.\n     */\n    HEAD = 4,\n}\nexport class HttpClient {\n    /**\n     * @remarks\n     * Cancels all pending requests.\n     * @param reason\n     */\n    cancelAll(reason: string): void;\n    /**\n     * @remarks\n     * Performs a simple HTTP get request.\n     * @param uri\n     * URL to make an HTTP Request to.\n     * @returns\n     * An awaitable promise that contains the HTTP response.\n     */\n    get(uri: string): Promise<HttpResponse>;\n    /**\n     * @remarks\n     * Performs an HTTP request.\n     * @param config\n     * Contains an HTTP Request object with configuration data on\n     * the HTTP request.\n     * @returns\n     * An awaitable promise that contains the HTTP response.\n     */\n    request(config: HttpRequest): Promise<HttpResponse>;\n    protected constructor();\n}\n/**\n * Represents an HTTP header - a key/value pair of\n * meta-information about a request.\n */\nexport class HttpHeader {\n    /**\n     * Key of the HTTP header.\n     */\n    'key': string;\n    /**\n     * Value of the HTTP header.\n     */\n    'value': string;\n    constructor(key: string, value: SecretString | string);\n}\n/**\n * Main object for structuring a request.\n */\nexport class HttpRequest {\n    /**\n     * Content of the body of the HTTP request.\n     */\n    'body': string;\n    /**\n     * A collection of HTTP headers to add to the outbound request.\n     */\n    'headers': HttpHeader[];\n    /**\n     * HTTP method (e.g., GET or PUT or PATCH) to use for making\n     * the request.\n     */\n    'method': HttpRequestMethod;\n    /**\n     * Amount of time, in seconds, before the request times\n     * out and is abandoned.\n     */\n    'timeout': number;\n    /**\n     * The HTTP resource to access.\n     */\n    'uri': string;\n    /**\n     * @remarks\n     * Adds an additional header to the overall list of headers\n     * used in the corresponding HTTP request.\n     * @param key\n     * @param value\n     */\n    addHeader(key: string, value: string): HttpRequest;\n    constructor(uri: string);\n    setBody(body: string): HttpRequest;\n    /**\n     * @remarks\n     * Replaces and applies a set of HTTP Headers for the request.\n     * @param headers\n     */\n    setHeaders(headers: HttpHeader[]): HttpRequest;\n    setMethod(method: HttpRequestMethod): HttpRequest;\n    setTimeout(timeout: number): HttpRequest;\n}\n/**\n * Main object that contains result information from a request.\n */\nexport class HttpResponse {\n    /**\n     * Body content of the HTTP response.\n     */\n    readonly 'body': string;\n    /**\n     * A collection of HTTP response headers returned from the\n     * request.\n     */\n    readonly 'headers': HttpHeader[];\n    /**\n     * The HTTP request that corresponds to the HTTP response\n     * that this object represents.\n     */\n    readonly 'request': HttpRequest;\n    /**\n     * HTTP response code for the request. For example, 404\n     * represents resource not found, and 500 represents an\n     * internal server error.\n     */\n    readonly 'status': number;\n    protected constructor();\n}\nexport const http: HttpClient;\n";export const Namespace="\nexport enum HttpRequestMethod {\n    POST = 0,\n    PUT = 1,\n    GET = 2,\n    DELETE = 3,\n    HEAD = 4,\n}\nexport class HttpClient {\n    cancelAll(reason: string): void;\n    get(uri: string): Promise<HttpResponse>;\n    request(config: HttpRequest): Promise<HttpResponse>;\n    protected constructor();\n}\nexport class HttpHeader {\n    'key': string;\n    'value': string;\n    constructor(key: string, value: mojangminecraftserveradmin.SecretString | string);\n}\nexport class HttpRequest {\n    'body': string;\n    'headers': HttpHeader[];\n    'method': HttpRequestMethod;\n    'timeout': number;\n    'uri': string;\n    addHeader(key: string, value: string): HttpRequest;\n    constructor(uri: string);\n    setBody(body: string): HttpRequest;\n    setHeaders(headers: HttpHeader[]): HttpRequest;\n    setMethod(method: HttpRequestMethod): HttpRequest;\n    setTimeout(timeout: number): HttpRequest;\n}\nexport class HttpResponse {\n    readonly 'body': string;\n    readonly 'headers': HttpHeader[];\n    readonly 'request': HttpRequest;\n    readonly 'status': number;\n    protected constructor();\n}\nexport const http: HttpClient;";